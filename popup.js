let validateBtn = document.getElementById('validateBtn');
let collectBtn = document.getElementById('collectBtn');
let counter = 0;
let errorCounter =0;
let warningCounter =0;
let domObject = null;
function modifyDOM(){

  var output = document.body.childNodes[0].innerHTML;
  return output;

}
function getDom() {
  chrome.tabs.executeScript({
      code: '(' + modifyDOM + ')();' //argument here is a string but function.toString() returns function's code
  }, (results) => {
   
      chrome.storage.sync.set({ [ "dom" + counter ] : results[0] }, function(){
        collectBtn.style.backgroundColor = "#00ff00";
        getStorage("dom"+counter);
      });
       
      //Here we have just the innerHTML and not DOM structure
      //console.log(results[0]);
  });
}

function getStorage(storageName){
  chrome.storage.sync.get(storageName, function (data) {
    domObject = data[storageName];
    
  });
}
collectBtn.onclick = function(){
  getDom();
  
}
validateBtn.onclick = async function(element){
    // here code for the vulnerabilities
    collectBtn.style.backgroundColor = "#ffffff";
  testContract(domObject)

};

function testContract(domObject){
  // crypto magic.exe
  if(domObject != null){
    console.log(domObject);
    checkForUintOverOrUnderflow(domObject);
    wrongUseOfTimeStamp(domObject);
  }else{
    console.log("domObjc is null");
  }
}
function checkForUintOverOrUnderflow(domObjc){
  // check if the better math lib from openZeppelin imported
  var words = domObject.split(" ");
  console.log(words);
  if(domObjc.includes("import \"@openzeppelin/contracts/math/Math.sol\"") || domObjc.includes("import \"openzeppelin/contracts/math/Math.sol\"")){
    // we trust, that they use the new operations of the lib
    return;
  }else if(words.includes("uint8")|| words.includes("uint")){
    // check if the uint8 in a 
    //operation and add as error or warning, that the int can be exploited
    let uint8Index = words.indexOf("uint8");
    let uintIndex = words.indexOf("uint");
    console.log(uint8Index);
  }
}
function wrongUseOfTimeStamp(domObjc){
  console.log("Next function");
}